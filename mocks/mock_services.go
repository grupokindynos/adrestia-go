// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grupokindynos/adrestia-go/services (interfaces: HestiaService,PlutusService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	adrestia "github.com/grupokindynos/adrestia-go/models/adrestia"
	balance "github.com/grupokindynos/adrestia-go/models/balance"
	hestia "github.com/grupokindynos/common/hestia"
	plutus "github.com/grupokindynos/common/plutus"
	reflect "reflect"
)

// MockHestiaService is a mock of HestiaService interface
type MockHestiaService struct {
	ctrl     *gomock.Controller
	recorder *MockHestiaServiceMockRecorder
}

// MockHestiaServiceMockRecorder is the mock recorder for MockHestiaService
type MockHestiaServiceMockRecorder struct {
	mock *MockHestiaService
}

// NewMockHestiaService creates a new mock instance
func NewMockHestiaService(ctrl *gomock.Controller) *MockHestiaService {
	mock := &MockHestiaService{ctrl: ctrl}
	mock.recorder = &MockHestiaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHestiaService) EXPECT() *MockHestiaServiceMockRecorder {
	return m.recorder
}

// CreateAdrestiaOrder mocks base method
func (m *MockHestiaService) CreateAdrestiaOrder(arg0 hestia.AdrestiaOrder) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdrestiaOrder", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdrestiaOrder indicates an expected call of CreateAdrestiaOrder
func (mr *MockHestiaServiceMockRecorder) CreateAdrestiaOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdrestiaOrder", reflect.TypeOf((*MockHestiaService)(nil).CreateAdrestiaOrder), arg0)
}

// GetAdrestiaCoins mocks base method
func (m *MockHestiaService) GetAdrestiaCoins() ([]hestia.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdrestiaCoins")
	ret0, _ := ret[0].([]hestia.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdrestiaCoins indicates an expected call of GetAdrestiaCoins
func (mr *MockHestiaServiceMockRecorder) GetAdrestiaCoins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdrestiaCoins", reflect.TypeOf((*MockHestiaService)(nil).GetAdrestiaCoins))
}

// GetAllOrders mocks base method
func (m *MockHestiaService) GetAllOrders(arg0 adrestia.OrderParams) ([]hestia.AdrestiaOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", arg0)
	ret0, _ := ret[0].([]hestia.AdrestiaOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders
func (mr *MockHestiaServiceMockRecorder) GetAllOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockHestiaService)(nil).GetAllOrders), arg0)
}

// GetBalancingOrders mocks base method
func (m *MockHestiaService) GetBalancingOrders() ([]hestia.AdrestiaOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalancingOrders")
	ret0, _ := ret[0].([]hestia.AdrestiaOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalancingOrders indicates an expected call of GetBalancingOrders
func (mr *MockHestiaServiceMockRecorder) GetBalancingOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalancingOrders", reflect.TypeOf((*MockHestiaService)(nil).GetBalancingOrders))
}

// UpdateAdrestiaOrder mocks base method
func (m *MockHestiaService) UpdateAdrestiaOrder(arg0 hestia.AdrestiaOrder) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdrestiaOrder", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdrestiaOrder indicates an expected call of UpdateAdrestiaOrder
func (mr *MockHestiaServiceMockRecorder) UpdateAdrestiaOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdrestiaOrder", reflect.TypeOf((*MockHestiaService)(nil).UpdateAdrestiaOrder), arg0)
}

// UpdateAdrestiaOrderStatus mocks base method
func (m *MockHestiaService) UpdateAdrestiaOrderStatus(arg0 hestia.AdrestiaOrderUpdate) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdrestiaOrderStatus", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdrestiaOrderStatus indicates an expected call of UpdateAdrestiaOrderStatus
func (mr *MockHestiaServiceMockRecorder) UpdateAdrestiaOrderStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdrestiaOrderStatus", reflect.TypeOf((*MockHestiaService)(nil).UpdateAdrestiaOrderStatus), arg0)
}

// MockPlutusService is a mock of PlutusService interface
type MockPlutusService struct {
	ctrl     *gomock.Controller
	recorder *MockPlutusServiceMockRecorder
}

// MockPlutusServiceMockRecorder is the mock recorder for MockPlutusService
type MockPlutusServiceMockRecorder struct {
	mock *MockPlutusService
}

// NewMockPlutusService creates a new mock instance
func NewMockPlutusService(ctrl *gomock.Controller) *MockPlutusService {
	mock := &MockPlutusService{ctrl: ctrl}
	mock.recorder = &MockPlutusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlutusService) EXPECT() *MockPlutusServiceMockRecorder {
	return m.recorder
}

// GetAddress mocks base method
func (m *MockPlutusService) GetAddress(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockPlutusServiceMockRecorder) GetAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockPlutusService)(nil).GetAddress), arg0)
}

// GetBtcAddress mocks base method
func (m *MockPlutusService) GetBtcAddress() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBtcAddress")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBtcAddress indicates an expected call of GetBtcAddress
func (mr *MockPlutusServiceMockRecorder) GetBtcAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBtcAddress", reflect.TypeOf((*MockPlutusService)(nil).GetBtcAddress))
}

// GetWalletBalances mocks base method
func (m *MockPlutusService) GetWalletBalances(arg0 []hestia.Coin) []balance.Balance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalances", arg0)
	ret0, _ := ret[0].([]balance.Balance)
	return ret0
}

// GetWalletBalances indicates an expected call of GetWalletBalances
func (mr *MockPlutusServiceMockRecorder) GetWalletBalances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalances", reflect.TypeOf((*MockPlutusService)(nil).GetWalletBalances), arg0)
}

// GetWalletTx mocks base method
func (m *MockPlutusService) GetWalletTx(arg0, arg1 string) (plutus.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTx", arg0, arg1)
	ret0, _ := ret[0].(plutus.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletTx indicates an expected call of GetWalletTx
func (mr *MockPlutusServiceMockRecorder) GetWalletTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTx", reflect.TypeOf((*MockPlutusService)(nil).GetWalletTx), arg0, arg1)
}

// WithdrawToAddress mocks base method
func (m *MockPlutusService) WithdrawToAddress(arg0 plutus.SendAddressBodyReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawToAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawToAddress indicates an expected call of WithdrawToAddress
func (mr *MockPlutusServiceMockRecorder) WithdrawToAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawToAddress", reflect.TypeOf((*MockPlutusService)(nil).WithdrawToAddress), arg0)
}
